# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.>
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type Memo
  @model
  @auth(rules: [
    { allow: owner },  # 作成者にフルアクセス（create, read, update, delete）
    { allow: owner, ownerField: "sharedWith", operations: [read, update] } # 共有先は read＋update
  ])
{
  id: ID!
  content: String!
  tags: [String]
  sharedWith: [String]     # ✅ 各ユーザーの Cognito `sub` を配列で保持
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Diary @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  owner: String!
  content: String!
  date: AWSDate!
  lastOpenedAt: AWSDateTime  # ← 追加
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Schedule @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  owner: String!
  date: AWSDate!
  startTime: String
  endTime: String
  title: String
  memo: String
  lastOpenedAt: AWSDateTime  # ← 追加
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Contact @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  name: String!
  furigana: String
  phoneNumbers: [String]
  emails: [String]
  note: String
  yamatoId: String            # 表示用はそのまま残してOK
  lastOpenedAt: AWSDateTime
  createdAt: AWSDateTime
}


type ChatRoom
  @model
  @auth(rules: [
    { allow: owner },
    { allow: private, operations: [read, create, update] }
  ])
{
  id: ID!
  user1: String!
  user2: String!
  lastMessage: String
  lastTimestamp: AWSDateTime
  lastReadAtUser2: AWSDateTime
  lastReadAtUser1: AWSDateTime
  lastSenderId: String
  expiresAt: AWSTimestamp

  deletedByUser1: Boolean @default(value: "false")
  deletedByUser2: Boolean @default(value: "false")

  # `updatedAt` は Amplify により自動生成・更新されるので明示的に追加しなくてOK
}

type Message
  @model(
    timestamps: { createdAt: "createdAt", updatedAt: null }
    subscriptions: { level: public, onCreate: ["onCreateMessage"] }
  )
  @auth(rules: [
    { allow: owner },  # 送信者（自動的に sub に基づく）にフルアクセス
    { allow: private, operations: [read] } # ログインユーザー全員が読み取り可（最低限の制御）
  ])
{
  id: ID!
  roomId: ID!
  senderSub: String!        # ← 新規追加（これで識別）
  senderYamatoId: String!   # ← 表示用（変更可能）
  receiverSub: String!      # ← 新規追加（受信者の権限にも使える）
  receiverYamatoId: String! # ← 表示用（変更可能）

  content: String!
  timestamp: AWSDateTime!
  createdAt: AWSDateTime
  expiresAt: AWSTimestamp
}

type PublicProfile @model
@auth(rules: [
  { allow: public, operations: [read] },
  { allow: owner },
  { allow: private, operations: [read] }
]) {
  id: ID!
  yamatoId: String! @index(name: "byYamatoId", queryField: "publicProfileByYamatoId")
  displayName: String
  icon: String
  bio: String
}


type ChatRequest @model @auth(rules: [
  { allow: owner, ownerField: "fromUserId", operations: [create, read, update, delete] },
  { allow: owner, ownerField: "toUserId", operations: [read, update, delete] } # ✅ delete を追加
]) {
  id: ID!
  fromUserId: ID!       # 申請者（Cognitoのsub）
  toUserId: ID!         # 相手ユーザー
  status: String!       # "pending" / "accepted" / "rejected"
  message: String       # 任意の申請メッセージ
  createdAt: AWSDateTime!
  ttl: AWSTimestamp     # ✅ TTLによって3日で自動削除される
}


type Photo @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  owner: String!
  fileName: String!         # フルサイズ画像
  thumbnailFileName: String! # サムネイル画像 ← 新フィールド
  photoTakenAt: AWSDateTime
  lastOpenedAt: AWSDateTime
  isFavorite: Boolean! @default(value: "false")
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type ScheduleTemplate @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  emoji: String        # オプション
  label: String        # オプション
  startTime: String!
  endTime: String!
}


type WindMessage
  @model(
    timestamps: { createdAt: "createdAt", updatedAt: null }
  )
  @auth(rules: [
    { allow: owner },
    { allow: private, operations: [read, create, update, delete] }
  ]) {
  id: ID!
  fromUserId: String!
  fromDisplayName: String!
  toUserId: String!

  content: String!
  deliveryDate: AWSDateTime!
  isOpened: Boolean!
  openedAt: AWSDateTime

  deletedByReceiver: Boolean @default(value: "false")
  favoriteByReceiver: Boolean @default(value: "false") # ✅ ハート機能
  ttl: AWSTimestamp
  createdAt: AWSDateTime
}

type Blossom @model @auth(rules: [
  { allow: owner },
  { allow: private, operations: [read] }
]) {
  id: ID!
  lat: Float!
  lng: Float!
  comment: String
  yamatoId: String
  nickname: String
  emoji: String
  hobby: String
  country: String
  region: String
  createdAt: AWSDateTime!
}

