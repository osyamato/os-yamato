# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.>
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type Memo @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  content: String!
  tags: [String]        # ← ここを追加！
  owner: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

# ✅ カレンダー用の予定モデル
type Schedule @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  owner: String!
  date: AWSDate!
  startTime: String
  endTime: String
  title: String
  memo: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Diary @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  owner: String!
  content: String!
  date: AWSDate!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Contact @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  name: String!
  furigana: String
  phoneNumbers: [String]
  emails: [String]
  note: String
  yamatoId: String        # ✅ Yamato IDを追加！
  owner: String
  createdAt: AWSDateTime  # 芽が出た瞬間
  lastOpenedAt: AWSDateTime # 世話をした最新
}

type ChatRoom
  @model
  @auth(rules: [
    { allow: owner },
    { allow: private, operations: [read, create, update] }
  ])
{
  id: ID!
  user1: String!
  user2: String!
  lastMessage: String
  lastTimestamp: AWSDateTime
  lastReadAtUser2: AWSDateTime
  lastReadAtUser1: AWSDateTime
  lastSenderId: String
  expiresAt: AWSTimestamp

  deletedByUser1: Boolean @default(value: "false")
  deletedByUser2: Boolean @default(value: "false")

  # `updatedAt` は Amplify により自動生成・更新されるので明示的に追加しなくてOK
}

type Message
  @model(
    timestamps: { createdAt: "createdAt", updatedAt: null }
    subscriptions: { level: public, onCreate: ["onCreateMessage"] }
  )
  @auth(rules: [
    { allow: owner },
    { allow: private, operations: [read, create] }
  ])
{
  id: ID!
  roomId: ID!
  senderYamatoId: String!
  receiverYamatoId: String!
  content: String!
  timestamp: AWSDateTime!
  createdAt: AWSDateTime
  expiresAt: AWSTimestamp
}

type PublicProfile @model
@auth(rules: [
  { allow:public, operations: [read] },
  { allow: owner },
  { allow: private, operations: [read] }  # ← これを追加
]) {
  id: ID!
  yamatoId: String! @index(name: "byYamatoId", queryField: "publicProfileByYamatoId")
  displayName: String
  icon: String
  bio: String
}
