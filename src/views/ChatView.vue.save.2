<template>
  <div class="view-wrapper" @click="dismissKeyboard">
    <div class="chat-container">
      <!-- üîº „Éò„ÉÉ„ÉÄ„Éº -->
      <div class="chat-header">
        <span>{{ partnerDisplayName }}</span>
      </div>

      <!-- üîΩ „É°„ÉÉ„Çª„Éº„Ç∏‰∏ÄË¶ß -->
      <div class="message-list">
        <template v-for="(msg, index) in groupedMessages" :key="msg.id || index">
          <div v-if="msg.isDateSeparator" class="date-separator">
            {{ msg.date }}
          </div>

          <div
            v-else
            class="message-row"
            :class="{ mine: msg.senderSub === mySub }"
          >
            <!-- üí¨ Áõ∏Êâã„É°„ÉÉ„Çª„Éº„Ç∏ -->
            <div v-if="msg.senderSub !== mySub">
              <span class="timestamp-side">{{ formatTime(msg.timestamp) }}</span>
              <template v-if="msg.contentType === 'image'">
                <img
                  :src="msg.imageUrl"
                  class="message-image"
                  @click="openImageModal(msg.imageUrl, msg.imageKey)"
                  @load="onImageLoad"
                />
              </template>
              <template v-else>
<div
  v-if="msg.senderSub !== mySub"
  class="message"
  @touchstart="startLongPress(msg.id)"
  @touchend="cancelLongPress"
  @mousedown="startLongPress(msg.id)"
  @mouseup="cancelLongPress"
  @mouseleave="cancelLongPress"
>
                  <div v-html="msg.content.replace(/\n/g, '<br>')"></div>
                </div>
              </template>
            </div>

            <!-- üí¨ Ëá™ÂàÜ„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏ -->
            <div v-else>
              <span class="timestamp-side">{{ formatTime(msg.timestamp) }}</span>
              <template v-if="msg.contentType === 'image'">
                <img
                  :src="msg.imageUrl"
                  class="message-image"
                  @click="openImageModal(msg.imageUrl, msg.imageKey)"
                  @load="onImageLoad"
                />
              </template>
              <template v-else>
                <div
                  class="message mine"
>
                  <div v-html="msg.content.replace(/\n/g, '<br>')"></div>
                </div>
              </template>
            </div>

            <!-- üéâ „É™„Ç¢„ÇØ„Ç∑„Éß„É≥„Éî„ÉÉ„Ç´„Éº -->
<div
  v-if="showReactionPickerFor === msg.id && msg.senderSub !== mySub"
  class="reaction-picker"
  :class="{ right: msg.senderSub !== mySub, left: msg.senderSub === mySub }"
>
  <span
    v-for="emoji in ['‚ù§Ô∏è','üòÜ','üò¢','üòÆ','ü•∞']"
    :key="emoji"
    @click="selectReaction(emoji, msg)"
  >
    {{ emoji }}
  </span>
</div>

            <!-- üñºÔ∏è „É™„Ç¢„ÇØ„Ç∑„Éß„É≥Ë°®Á§∫ -->
<div v-if="msg.reactions?.items?.length" class="reaction-display">
  <span v-for="r in msg.reactions.items" :key="r.id || r.emoji">{{ r.emoji }}</span>
</div>
          </div>
        </template>

        <div ref="bottomOfChat"></div>
      </div>

      <!-- ‚ú® „Ç®„Éï„Çß„ÇØ„Éà -->
      <ChatEffect ref="chatEffect" />

      <!-- üîΩ ÂÖ•ÂäõÊ¨Ñ -->
      <div class="input-area">
        <button type="button" @click="openPhotoPicker" class="circle-button">üñº</button>
        <textarea
          ref="textareaRef"
          v-model="newMessage"
          placeholder="„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂÖ•Âäõ..."
          rows="1"
          class="message-input"
          @input="autoResize"
          @compositionstart="handleCompositionStart"
          @compositionend="handleCompositionEnd"
        ></textarea>
        <button
          type="button"
          :disabled="!newMessage.trim() || (isComposing && isJapaneseInput)"
          :class="['circle-button', { disabled: isComposing && isJapaneseInput }]"
          @mousedown.prevent
          @click="sendMessage"
        >
          ‚áß
        </button>
      </div>
    </div>

    <!-- üì∑ ÂÜôÁúü„Çª„É¨„ÇØ„Çø -->
    <PhotoPickerPanel
      v-if="showPhotoPicker && isMobile"
      @close="showPhotoPicker = false"
      @send="handlePhotoSelect"
    />
    <PhotoPickerModal
      v-else-if="showPhotoPicker"
      @close="showPhotoPicker = false"
      @send="handlePhotoSelect"
    />

    <!-- üëÅ „Éï„É´ÁîªÂÉè„Éó„É¨„Éì„É•„Éº -->
    <ImagePreviewModal
      :visible="showImageModal"
      :imageUrl="previewImageUrl"
      :imageKey="previewImageKey"
      @close="showImageModal = false"
    />
  </div>
</template>


<script setup>
import { ref, computed, onMounted, watchEffect, watch, nextTick, onBeforeUnmount } from 'vue'
import { API, graphqlOperation, Auth, Storage } from 'aws-amplify'
import { updateChatRoom, createMessage } from '@/graphql/mutations'
import { onCreateMessage } from '@/graphql/subscriptions'
import { useRoute } from 'vue-router'
import ChatEffect from '@/components/ChatEffect.vue'
import PhotoPickerModal from '@/components/PhotoPickerModal.vue'
import PhotoPickerPanel from '@/components/PhotoPickerPanel.vue'
import ImagePreviewModal from '@/components/ImagePreviewModal.vue'
import { listMessages, publicProfileByYamatoId } from '@/graphql/queries'
import { createReaction } from '@/graphql/mutations'

const showImageModal = ref(false)
const previewImageUrl = ref('')
const previewImageKey = ref('')

const selectedMessageId = ref(null)
const showReactionPicker = ref(false)
const reactionTargetMessage = ref(null)


const loadedImageCount = ref(0)

function handleLongPress(message) {
  reactionTargetMessage.value = message
  showReactionPicker.value = true
}

let pressTimer = null

function startPressTimer(callback) {
  clearTimeout(pressTimer)
  pressTimer = setTimeout(() => {
    callback()
  }, 600)
}

function clearPressTimer() {
  clearTimeout(pressTimer)
}

async function selectReaction(emoji, msg) {
  const user = await Auth.currentAuthenticatedUser()
  const result = await API.graphql(graphqlOperation(createReaction, {
    input: {
      messageId: msg.id,
      emoji,
      reactorSub: user.attributes.sub,
      reactorYamatoId: user.attributes['custom:yamatoId'] || 'ÂåøÂêç'
    }
  }))

  const newReaction = result.data?.createReaction
  if (newReaction) {
    const target = messages.value.find(m => m.id === msg.id)
    if (target) {
      if (!target.reactions) target.reactions = { items: [] }
      target.reactions.items.push(newReaction)
    }
  }

  showReactionPickerFor.value = null
}

async function reactToMessage(emoji) {
  const user = await Auth.currentAuthenticatedUser()
  await API.graphql(graphqlOperation(createReaction, {
    input: {
      messageId: props.message.id,
      emoji,
      reactorSub: user.attributes.sub,
      reactorYamatoId: user.attributes['custom:yamatoId'] || 'ÂåøÂêç'
    }
  }))
  showPicker.value = false
}

const showReactionPickerFor = ref(null)
let longPressTimer = null

function startLongPress(messageId) {
  longPressTimer = setTimeout(() => {
    showReactionPickerFor.value = messageId
  }, 500)
}

function cancelLongPress() {
  if (longPressTimer) {
    clearTimeout(longPressTimer)
    longPressTimer = null
  }
}


const messagesByRoomIdQuery = /* GraphQL */ `
  query MessagesByRoomId($roomId: ID!, $sortDirection: ModelSortDirection, $limit: Int) {
    messagesByRoomId(roomId: $roomId, sortDirection: $sortDirection, limit: $limit) {
      items {
        id
        roomId
        senderSub
        content
        contentType
        imageKey
        timestamp
        reactions {
          items {
            id
            emoji
            reactorSub
            reactorYamatoId
          }
        }
        createdAt
      }
    }
  }
`

function onImageLoad() {
  loadedImageCount.value++

  // ÂÖ®ÈÉ®Ë™≠„ÅøËæº„Åæ„Çå„Åü„Çâ„Çπ„ÇØ„É≠„Éº„É´
  if (loadedImageCount.value >= imageCount.value) {
    nextTick(() => scrollToBottom(true))
  }
}

async function openImageModal(thumbnailUrl, fullKey) {
  try {
    const fullUrl = await Storage.get(fullKey, { level: 'public' })
    previewImageUrl.value = fullUrl
    previewImageKey.value = fullKey // ‚úÖ „Åì„Çå„ÇíËøΩÂä†
  } catch (e) {
    console.warn('‚ùå „Éï„É´ÁîªÂÉèÂèñÂæó„Å´Â§±Êïó„ÄÇ‰ª£„Çè„Çä„Å´„Çµ„É†„Éç„Ç§„É´„ÇíË°®Á§∫:', e)
    previewImageUrl.value = thumbnailUrl
    previewImageKey.value = fullKey // ‚úÖ fallback Áî®„Å´„ÇÇ key „ÇíÊ∏°„Åô
  } finally {
    showImageModal.value = true
  }
}



const chatEffect = ref(null)
const textareaRef = ref(null)
const isComposing = ref(false)
const bottomOfChat = ref(null)

const partnerDisplayName = ref('')
const messages = ref([])
const newMessage = ref('')
const myYamatoId = ref('')
const mySub = ref('')
const roomId = ref('')
const receiverYamatoId = ref('')
const receiverSub = ref('')
const showPhotoPicker = ref(false)
const isMobile = ref(false)


const isJapaneseInput = ref(false)

const handleCompositionStart = (e) => {
  isComposing.value = true
  isJapaneseInput.value = /[„ÅÅ-„Çì„Ç°-„É≥]/.test(e.data || '')
}

const handleCompositionEnd = () => {
  isComposing.value = false
  isJapaneseInput.value = false
}


const route = useRoute()
let subscription = null

const groupedMessages = computed(() => groupMessagesByDate(messages.value))

onMounted(() => {
  isMobile.value = window.matchMedia('(max-width: 768px)').matches
})

function openPhotoPicker() {
  showPhotoPicker.value = true
}

async function handlePhotoSelect(photoOrPhotos) {
  const photos = Array.isArray(photoOrPhotos) ? photoOrPhotos : [photoOrPhotos]

  for (const photo of photos) {
    console.log('üì• Âèó‰ø° photo:', photo)

    // ‚úÖ „Åì„Åì„Åß previewUrl „Å® thumbPreviewUrl „ÇíÊ≠£„Åó„ÅèÊãæ„ÅÜ
    const preview = photo.previewUrl || photo.thumbPreviewUrl || ''

    if (!photo || !photo.imageKey || !photo.thumbnailKey) {
      console.warn('‚ö†Ô∏è ‰∏çÊ≠£„Å™ photo „Ç™„Éñ„Ç∏„Çß„ÇØ„Éà:', photo)
      continue
    }

    const now = new Date()
    const tempId = `temp-${now.getTime()}`

    const tempMessage = {
      id: tempId,
      roomId: roomId.value,
      senderSub: mySub.value,
      senderYamatoId: myYamatoId.value,
      receiverSub: receiverSub.value,
      receiverYamatoId: receiverYamatoId.value,
      content: '',
      contentType: 'image',
      imageKey: photo.imageKey,
      thumbnailKey: photo.thumbnailKey,
      timestamp: now.toISOString(),
      imageUrl: preview,
      isTemporary: true,
    }

    console.log('‚úÖ ‰ªÆ„É°„ÉÉ„Çª„Éº„Ç∏ËøΩÂä†:', tempMessage)

    messages.value.push(tempMessage)

    try {
      await sendImageMessage(photo.imageKey, photo.thumbnailKey)

      const finalUrl = await tryGetUrl(photo.thumbnailKey)
      const msg = messages.value.find(m => m.id === tempId)
      if (msg && finalUrl) msg.imageUrl = finalUrl
    } catch (e) {
      console.error('‚ùå ÁîªÂÉèÈÄÅ‰ø°„Ç®„É©„Éº:', e)
    }
  }

  showPhotoPicker.value = false
}


async function sendImageMessage(imageKey, thumbnailKey) {
  const now = new Date()
  const expiresAt = Math.floor(now.getTime() / 1000) + 365 * 24 * 60 * 60

  const input = {
    roomId: roomId.value,
    senderSub: mySub.value,
    senderYamatoId: myYamatoId.value,
    receiverSub: receiverSub.value,
    receiverYamatoId: receiverYamatoId.value,
    content: '',
    contentType: 'image',
    imageKey,
    thumbnailKey,
    timestamp: now.toISOString(),
    expiresAt
  }

  try {
    await API.graphql(graphqlOperation(createMessage, { input }))

    await API.graphql(graphqlOperation(updateChatRoom, {
      input: {
        id: roomId.value,
        lastMessage: 'üì∑ Photo',
        lastContentType: 'image',
        lastSenderId: mySub.value,
        lastTimestamp: now.toISOString()
      }
    }))
  } catch (err) {
    console.error('‚ùå ÁîªÂÉè„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°„Ç®„É©„Éº:', JSON.stringify(err, null, 2))
  }
}

watchEffect(() => {
  const params = route?.params || {}
  roomId.value = params.roomId || ''
  receiverYamatoId.value = params.receiverYamatoId || ''
})
watch(() => groupedMessages.value, async () => {
  await nextTick()
  scrollToBottom()
})

function maybePlayEffect(content) {
  if (!chatEffect.value) {
    console.log('üö® chatEffect is not ready')
    return false
  }

  // Âõ∫ÂÆöÊ≠£Ë¶èË°®Áèæ„ÅßÁâπÊÆä„Ç®„Éï„Çß„ÇØ„Éà
  const specialPatterns = [
    { pattern: /(i love you|ÊÑõ„Åó„Å¶„ÅÑ„Çã|ÊÑõ„Åó„Å¶„Çã)/i, effect: 'moon' },
    { pattern: /(ÈáëÈñ£ÂØ∫|‰∏âÂ≥∂Áî±Á¥ÄÂ§´|ÊÑõÂõΩ|Êûó„ÇÜ„Åã„Çä|ÂÄâÂ≤°Ââõ)/, effect: 'mishima' },
    { pattern: /(„Éó„É©„Éç„Çø„É™„Ç¶„É†|planetarium|space|ÂÆáÂÆô|ÂúüÊòü|saturn)/i, effect: 'saturn' },
    { pattern: /(„Åä„ÇÅ„Åß„Å®„ÅÜ|„ÅäÁ•ù„ÅÑ|Á•ù|congratulations|congrats|celebrate)/i, effect: 'confetti' },
    { pattern: /(ÊòüÁ©∫|„É¢„É≥„Ç¥„É´|Êòü|Â§úÁ©∫|stars|starry sky|night sky|mongolia)/i, effect: 'starry' },
    { pattern: /(„Ç∑„É£„Éú„É≥Áéâ|Ê≥°|bubble|bubbles|soap bubble)/i, effect: 'bubble' }
  ]

  const seasonalPatterns = [
    { pattern: /(Èõ®|rain)/i, effect: 'rain' },
    { pattern: /(Èõ™|snow)/i, effect: 'snow' },
    { pattern: /(Êô¥„Çå|sunny)/i, effect: 'sunny' },
    { pattern: /(È¢®|wind)/i, effect: 'wind' },
    { pattern: /(Êò•|spring)/i, effect: 'spring' },
    { pattern: /(Ê°ú|cherry blossom)/i, effect: 'spring' },
    { pattern: /(Áßã|fall|autumn)/i, effect: 'autumn' },
    { pattern: /(ÂÜ¨|winter)/i, effect: 'snow' }
  ]

  // ÁâπÊÆä„Éë„Çø„Éº„É≥ÂÑ™ÂÖà
  for (const { pattern, effect } of specialPatterns) {
    if (pattern.test(content)) {
      console.log('üéá Special pattern matched:', effect)
      chatEffect.value.playEffect(effect)
      hideKeyboard()
      return true
    }
  }

  // Â≠£ÁØÄ„Éë„Çø„Éº„É≥
  for (const { pattern, effect } of seasonalPatterns) {
    if (pattern.test(content)) {
      console.log('üçÉ Seasonal pattern matched:', effect)
      chatEffect.value.playEffect(effect)
      hideKeyboard()
      return true
    }
  }

  // Â§è„Å†„ÅëÁâπÊÆäÂëº„Å≥Âá∫„Åó
  if (/Â§è|summer/i.test(content)) {
    console.log('‚òÄÔ∏è Summer pattern matched: triggerSummer')
    chatEffect.value.triggerSummer()
    hideKeyboard()
    return true
  }

  console.log('‚ùå No effect matched')
  return false
}


watch(messages, () => {
  const lastMsg = messages.value[messages.value.length - 1]
  if (!lastMsg || lastMsg.senderSub === mySub.value) return
  maybePlayEffect(lastMsg.content)
})

function hideKeyboard() {
  const el = document.activeElement
  if (el && typeof el.blur === 'function') el.blur()
}

const imageCount = computed(() =>
  groupedMessages.value
    .flatMap(group => group.messages)
    .filter(msg => msg?.contentType === 'image').length
)

onMounted(async () => {
  await nextTick()
  scrollToBottom()

  const user = await Auth.currentAuthenticatedUser()
  mySub.value = user.attributes.sub

  const res = await API.graphql({
    query: /* GraphQL */ `
      query GetMyProfile($id: ID!) {
        getPublicProfile(id: $id) {
          yamatoId
        }
      }`,
    variables: { id: mySub.value },
    authMode: 'AMAZON_COGNITO_USER_POOLS'
  })
  myYamatoId.value = res.data.getPublicProfile.yamatoId

  const profileRes = await API.graphql(graphqlOperation(publicProfileByYamatoId, {
    yamatoId: receiverYamatoId.value
  }))
  const partner = profileRes.data.publicProfileByYamatoId.items[0]

  if (!partner) {
    console.warn('‚ö†Ô∏è partner „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü')
    partnerDisplayName.value = '‰∏çÊòé'
    return
  }

  partnerDisplayName.value = partner.displayName || 'Áõ∏Êâã'
  receiverSub.value = partner.id

  // ‚úÖ „É°„ÉÉ„Çª„Éº„Ç∏ÂèñÂæó
  await fetchMessages()

  // ‚úÖ ÂøÖ„Åö„É°„ÉÉ„Çª„Éº„Ç∏ÂèñÂæóÂæå„Å´„Çµ„Éñ„Çπ„ÇØÈñãÂßã
  subscribeToNewMessages()

  // Ôºà‰ª•‰∏ã„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
  loadedImageCount.value = 0
  await nextTick()

  if (imageCount.value === 0) {
    scrollToBottom(true)
  }
})

onBeforeUnmount(() => {
  if (subscription) subscription.unsubscribe()
})


async function fetchMessages() {
  try {
    if (subscription) {
      subscription.unsubscribe()
      subscription = null
    }

    const res = await API.graphql(graphqlOperation(messagesByRoomIdQuery, {
      roomId: roomId.value,
      sortDirection: "DESC",
      limit: 30
    }))

    const items = res.data.messagesByRoomId.items || []

    const sorted = items
      .filter(msg => msg)
      .sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp))

    const enriched = await Promise.all(sorted.map(async msg => {
      if (msg.contentType === 'image' && msg.imageKey) {
        try {
          const url = await Storage.get(msg.thumbnailKey || msg.imageKey, { level: 'public' })
          return { ...msg, imageUrl: url }
        } catch {
          return msg
        }
      }
      return msg
    }))

    messages.value = enriched
    await nextTick()
    scrollToBottom()

    subscribeToNewMessages()

  } catch (err) {
    console.error('‚ùå „É°„ÉÉ„Çª„Éº„Ç∏ÂèñÂæó„Ç®„É©„Éº:', JSON.stringify(err, null, 2))
  }
}


async function sendMessage() {
  if (isComposing.value) return
const content = (newMessage.value || '').trim() 
  if (!content) return

  const now = new Date()
  const expiresAt = Math.floor(now.getTime() / 1000) + 365 * 24 * 60 * 60

  const input = {
    roomId: roomId.value,
    senderSub: mySub.value,
    senderYamatoId: myYamatoId.value,
    receiverSub: receiverSub.value,
    receiverYamatoId: receiverYamatoId.value,
    content,
    timestamp: now.toISOString(),
    expiresAt
  }

  try {
    await API.graphql(graphqlOperation(createMessage, { input }))
await API.graphql(graphqlOperation(updateChatRoom, {
  input: {
    id: roomId.value,
    lastMessage: content,
    lastContentType: 'text', // ‚úÖ ‚Üê „Åì„Çå„ÇíËøΩÂä†ÔºÅ
    lastTimestamp: now.toISOString(),
    lastSenderId: mySub.value,
    expiresAt
  }
}))
    newMessage.value = ''
    await nextTick()
    if (textareaRef.value) textareaRef.value.style.height = 'auto'
    const triggered = maybePlayEffect(content)
    if (!triggered && textareaRef.value) textareaRef.value.focus()
  } catch (err) {
    console.error('‚ùå „É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°„Ç®„É©„Éº:', JSON.stringify(err, null, 2))
    if (err.errors) err.errors.forEach(e => console.error('GraphQL Error:', e.message))
  }
}

function autoResize(event) {
  const textarea = event.target
  textarea.style.height = 'auto'
  textarea.style.height = Math.min(textarea.scrollHeight, 150) + 'px'
}

function formatTime(ts) {
  const date = new Date(ts)
  return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
}

function subscribeToNewMessages() {
  subscription = API.graphql(graphqlOperation(onCreateMessage)).subscribe({
    next: async ({ value }) => {
      const newMsg = value?.data?.onCreateMessage
      if (!newMsg?.roomId) {
        console.warn('‚ö†Ô∏è ÁÑ°Âäπ„Å™„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂèó‰ø°:', value)
        return
      }

      if (newMsg.roomId === roomId.value) {
        let enrichedMsg = newMsg

        // üí¨ ÁîªÂÉè„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÂ†¥Âêà„Å´ imageUrl „ÇíÂèñÂæó
        if (newMsg.contentType === 'image' && newMsg.imageKey) {
          try {
            const url = await Storage.get(newMsg.thumbnailKey || newMsg.imageKey, {
              level: 'public'
            })
            enrichedMsg = { ...newMsg, imageUrl: url }
          } catch (e) {
            console.warn('‚ö†Ô∏è „Çµ„Éñ„Çπ„ÇØ‰∏≠„ÅÆÁîªÂÉèÂèñÂæó„Ç®„É©„Éº:', e)
          }
        }

        // ‚úÖ ‰ªÆ„É°„ÉÉ„Çª„Éº„Ç∏ÔºàisTemporary: trueÔºâÁΩÆ„ÅçÊèõ„Åà„É≠„Ç∏„ÉÉ„ÇØ
        const existingIndex = messages.value.findIndex(
          m => m.imageKey === newMsg.imageKey && m.isTemporary
        )

        if (existingIndex !== -1) {
          // ‚úÖ ‰ªÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÊ≠£Âºè„É°„ÉÉ„Çª„Éº„Ç∏„ÅßÁΩÆ„ÅçÊèõ„Åà„Çã
          messages.value.splice(existingIndex, 1, enrichedMsg)
        } else {
          // ‚úÖ id ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ
          const exists = messages.value.findIndex(m => m.id === newMsg.id) !== -1
          if (!exists) {
            messages.value.push(enrichedMsg)
          }
        }

        if (enrichedMsg.senderSub !== mySub.value) {
          maybePlayEffect(enrichedMsg.content)
        }

        await nextTick()
        setTimeout(() => scrollToBottom(), 0)
      }
    },
    error: (err) => console.error('‚ùå „Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥„Ç®„É©„Éº:', err)
  })
}


function groupMessagesByDate(messages) {
  const grouped = []
  let lastDate = null
  for (const msg of messages) {
    const date = new Date(msg.timestamp).toLocaleDateString('ja-JP', {
      year: 'numeric', month: 'long', day: 'numeric', weekday: 'short'
    })
    if (date !== lastDate) {
      grouped.push({ isDateSeparator: true, date })
      lastDate = date
    }
    grouped.push(msg)
  }
  return grouped
}

function scrollToBottom(immediate = false) {
  bottomOfChat.value?.scrollIntoView({ behavior: immediate ? 'auto' : 'smooth' })
}

function shouldTriggerEffect(content, season) {
  const pattern = new RegExp(`${season}(?![‰∏Ä-ÈæØ])`)
  return pattern.test(content)
}


async function tryGetUrl(key, retries = 5, delay = 1000) {
  for (let i = 0; i < retries; i++) {
    try {
      const url = await Storage.get(key, { level: 'public' })
      return url
    } catch (e) {
      console.warn(`üïì retry ${i + 1} for key: ${key}`, e)
      await new Promise(res => setTimeout(res, delay))
    }
  }
  console.error('‚ùå Storage.get Â§±Êïó:', key)
  return null
}

</script>


<style scoped>

.chat-container {
  display: flex;
  flex-direction: column;
  height: 100vh;
  background: #ffffff;
  color: #000;
  box-sizing: border-box;

  width: 100%;
  margin: 0 auto;
  max-width: 600px; /* ‚úÖ PCÂêë„ÅëÊúÄÂ§ßÂπÖ */
}

/* ‚úÖ PCÂêë„Åë„Å´min-width„ÇíËøΩÂä† */
@media (min-width: 768px) {
  .chat-container {
    min-width: 600px;
  }
}


button.disabled {
  opacity: 0.4;
  cursor: not-allowed;
}

.message-list {
  flex: 1;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
  padding: 1rem;
}

/* Âêπ„ÅçÂá∫„Åó + ÊôÇÈñì„ÅÆ1„Çª„ÉÉ„ÉàÔºàÊ®™‰∏¶„Å≥Ôºâ */
.message-row {
  display: flex;
  justify-content: flex-start; /* Áõ∏ÊâãÔºöÂ∑¶ÂØÑ„Åõ */
  align-items: flex-end;
  margin: 0.5rem 0;
  position: relative; 
}

.message-row.mine {
  justify-content: flex-end; /* Ëá™ÂàÜÔºöÂè≥ÂØÑ„Åõ */
}

/* Âêπ„ÅçÂá∫„ÅóÊú¨‰Ωì */


/* Âêπ„ÅçÂá∫„ÅóÊ®™„ÅÆÊôÇÈñì */
.timestamp-side {
  font-size: 0.75rem;
  color: #aaa;
  margin: 0 0.5rem;
  white-space: nowrap;
  align-self: center;
}

/* Êó•‰ªò„Çª„Éë„É¨„Éº„Çø */
.date-separator {
  text-align: center;
  margin: 1rem 0 0.5rem;
  font-size: 0.8rem;
  color: #bbb;
}

/* ÂÖ•ÂäõÊ¨Ñ */
.input-area {
  display: flex;
  align-items: flex-end; /* ‚úÖ „Éú„Çø„É≥„Çí‰∏ãÁ´Ø„Å´„Åù„Çç„Åà„Çã */
  padding: 1rem;
  border-top: 1px solid #333;
  gap: 0.5rem;
}

.modal-title {
  color: #111; /* ‚Üê „É©„Ç§„Éà„É¢„Éº„ÉâÁî®„ÅÆÈªíÊñáÂ≠ó */
  font-size: 1.2rem;
  margin-bottom: 1rem;
  text-align: center;
}

.message-input {
  flex: 1;
  padding: 0.6rem 1rem;
  font-size: 1rem;
  border-radius: 18px;
  border: 1px solid #ccc;
  background: #1e1e1e;
  color: #fff;
  overflow-y: auto;
  resize: none;
  max-height: 150px;
  min-height: 40px;
  transition: height 0.1s ease-out;
  box-sizing: border-box;
}



.message-input {
  background-color: #fff; /* ÈÄöÂ∏∏„É¢„Éº„Éâ„Åß„ÅØÁôΩ */
  color: #000;
  border: 1px solid #ccc;
  border-radius: 18px;
  padding: 0.6rem 1rem;
  font-size: 1rem;
  resize: none;
  box-sizing: border-box;
}

.view-wrapper {
  height: 100vh;
  display: flex;
  flex-direction: column;
}
.chat-header {
  position: sticky;
  top: 0;
  z-index: 100;
  background: rgba(255, 255, 255, 0.5); /* ‚Üê üå∏ ÈÄèÈÅéÁéá„Ç¢„ÉÉ„Éó */
  backdrop-filter: blur(10px);          /* ‚Üê „Åº„Åã„ÅóÂäπÊûúÂº∑„ÇÅ */
  padding: 0.75rem 1rem;
  font-size: 1.1rem;
  font-weight: bold;
  text-align: center;
  border-bottom: 1px solid rgba(0, 0, 0, 0.1); /* „ÇΩ„Éï„Éà„Å™Â¢ÉÁïåÁ∑ö */
  color: #333;
}


/* „ÉÄ„Éº„ÇØ„É¢„Éº„Éâ */
/* üëá scoped„Çπ„Çø„Ç§„É´ÂÜÖ„Åß„ÇÇ„Åó„Å£„Åã„ÇäÈÅ©Áî®„Åï„Çå„Çã„Çà„ÅÜ„Å´ :deep() „Çí‰Ωø„ÅÜ */
/* üí° Êó¢Â≠ò„ÅÆ .chat-container „Å´ÂØæ„Åô„Çã„ÉÄ„Éº„ÇØ„É¢„Éº„Éâ„ÅÆÊåáÂÆö„Åå‰∏çÂÆåÂÖ® */
@media (prefers-color-scheme: dark) {
  .chat-container {
    background-color: #121212 !important; /* Âº∑Âà∂ÁöÑ„Å´ÈÅ©Áî®„Åï„Åõ„Çã */
    color: #fff !important;
  }

  .message {
    background-color: #333 !important;
    color: #fff !important;
  }

  .message.mine {
    background-color: #274c77 !important; /* Ëá™ÂàÜ„ÅÆÂêπ„ÅçÂá∫„Åó„ÅÆËâ≤„ÅØÂ§â„Åà„Å™„ÅÑ */
  }

  .chat-header {
    background: rgba(0, 0, 0, 0.4) !important;
    color: #fff !important;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1) !important;
  }

}

.message-image {
  max-width: 220px;
  max-height: 220px;
  border-radius: 12px;
  object-fit: cover;
}

/* style„Çø„Ç∞ÂÜÖ„Å´ËøΩÂä† */
.message-image.temp {
  opacity: 0.4;
  filter: blur(1px);
}

.message-row.mine {
  justify-content: flex-end;
  /* text-align: right; ‚Üê ‚≠êÔ∏è „Åì„Çå„ÇíÂâäÈô§„Åô„Çã */
}

.message {
  display: inline-block;
  padding: 0.75rem 1rem;
  border-radius: 18px;
  font-size: 1rem;
  background-color: #e0e0e0;
  color: #000;
  word-break: break-word;
  white-space: pre-wrap;
  line-height: 1.5;
  text-align: left; /* ‚≠êÔ∏è „Åì„Çå„ÇíËøΩÂä†„Åô„Çã */

  max-width: 80vw;
  max-width: min(80vw, 520px);
}

.message.mine {
  background-color: #274c77;
  color: #fff;
  margin-left: auto; /* üí° Ëá™ÂàÜ„ÅÆÂêπ„ÅçÂá∫„Åó„ÅØÂè≥„Å´ÂØÑ„Åõ„Çã */
}

/* ‚úÖ „Çπ„Éû„Éõ„ÅØ„ÇÑ„ÇÑÁã≠„ÇÅÔºà70vwÔºâ */
@media (max-width: 600px) {
  .message {
    max-width: 70vw;
  }
}

button {
  flex-shrink: 0;
  height: 40px;           /* ‚úÖ „ÉÜ„Ç≠„Çπ„ÉàÊ¨Ñ„Å®ÊèÉ„Åà„Çã */
  padding: 0 1rem;
  font-size: 1rem;
  background-color: #274c77;
  color: white;
  border: none;
  border-radius: 10px;
  cursor: pointer;
  transition: opacity 0.2s;
  align-self: flex-end;
}

button:hover {
  opacity: 0.9;
}


.circle-button {
  background-color: #274c77;
  color: #fff;
  border: none;
  border-radius: 50%;
  width: 2.4rem !important;
  height: 2.4rem !important;
  font-size: 1.2rem;
  display: inline-flex;         /* üí° PCÊôÇ„ÅÆÊã°Âºµ„ÇíÊäëÂà∂ */
  align-items: center;
  justify-content: center;
  margin-left: 0.4rem;
  cursor: pointer;
  flex: 0 0 auto;               /* üí° ÂÆåÂÖ®Âõ∫ÂÆö„Å´„Åô„Çã */
  transition: background-color 0.2s ease;
}

.circle-button:hover {
  background-color: #e0e0e0;
}

.circle-button.disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.reaction-picker {
  display: flex;
  gap: 0.5rem;
  padding: 0.3rem 0.6rem;
  background: rgba(255, 255, 255, 0.15);
  border-radius: 1rem;
  margin-top: 0.2rem;
  user-select: none;
  font-size: 1.2rem;
  justify-content: flex-end; /* üî∏Âè≥ÂØÑ„Åõ */
  max-width: 70%;
  align-self: flex-end;
}

  display: flex;
  gap: 0.4rem;
  justify-content: flex-end; /* üî∏Âè≥ÂØÑ„Åõ */
  max-width: 70%;
  align-self: flex-end;
  pointer-events: none;
}

</style>
